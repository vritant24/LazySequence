using System;
using System.Collections;
using System.Collections.Generic;

namespace LazySequence
{
    /// <summary>
    /// Allows you to lazily generate elements of a sequence
    /// that can be iterated on.
    /// </summary>
    /// <typeparam name="T">The type of element in the sequence.</typeparam>
    public class LazySequence<T> : IEnumerable<T>
    {
        private readonly GetNextElementDelegate getNextElement;
        private readonly T firstElement;

        /// <summary>
        /// A <see cref="Delegate"/> to generate next element in the sequence.
        /// </summary>
        /// <param name="previousElement">Previous element in the sequence.</param>
        /// <param name="nextIndex">Index of element to be generated by this delegate.</param>
        /// <returns>
        /// A <see cref="Tuple"/> of:
        /// <list type="number">
        /// <item>The next element in the sequence.</item>
        /// <item>A bool to indicate whether the returned element is the last element.</item>
        /// </list>
        /// </returns>
        public delegate (T nextElement, bool isLastElement) GetNextElementDelegate(
            T previousElement, ulong nextIndex);

        /// <summary>
        /// creates a <see cref="LazySequence{T}"/> 
        /// </summary>
        /// <param name="firstElement">
        /// The first element of the sequence.
        /// </param>
        /// <param name="getNextElement">
        /// <see cref="GetNextElementDelegate"/>
        /// </param>
        public static IEnumerable<T> Create(
            T firstElement,
            GetNextElementDelegate getNextElement)
        {
            firstElement = firstElement
                ?? throw new ArgumentNullException(nameof(firstElement));
            getNextElement = getNextElement
                ?? throw new ArgumentNullException(nameof(getNextElement));

            return new LazySequence<T>(firstElement, getNextElement);
        }

        private LazySequence(
            T firstElement,
            GetNextElementDelegate getNextElement)
        {
            this.firstElement = firstElement
                ?? throw new ArgumentNullException(nameof(firstElement));
            this.getNextElement = getNextElement
                ?? throw new ArgumentNullException(nameof(getNextElement));
        }

        #region IEnumerable
        /// <summary>
        /// Lazily iterates on the sequence.
        /// </summary>
        /// <returns>Enumerator that can be iterated on.</returns>
        public IEnumerator<T> GetEnumerator()
        {
            var isCompleted = false;
            ulong indexOfCurrentElement = 0;
            T currentElement = this.firstElement;

            while (!isCompleted)
            {
                yield return currentElement;

                indexOfCurrentElement++;
                (currentElement, isCompleted) =
                    this.getNextElement(currentElement, indexOfCurrentElement);
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();
        #endregion
    }
}
